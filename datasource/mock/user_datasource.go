// Code generated by MockGen. DO NOT EDIT.
// Source: datasource/user_datasource.go
//
// Generated by this command:
//
//	mockgen -source=datasource/user_datasource.go -destination=datasource/mock/user_datasource.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	datasource "atm-simulation/datasource"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUserDatasources is a mock of UserDatasources interface.
type MockUserDatasources struct {
	ctrl     *gomock.Controller
	recorder *MockUserDatasourcesMockRecorder
}

// MockUserDatasourcesMockRecorder is the mock recorder for MockUserDatasources.
type MockUserDatasourcesMockRecorder struct {
	mock *MockUserDatasources
}

// NewMockUserDatasources creates a new mock instance.
func NewMockUserDatasources(ctrl *gomock.Controller) *MockUserDatasources {
	mock := &MockUserDatasources{ctrl: ctrl}
	mock.recorder = &MockUserDatasourcesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserDatasources) EXPECT() *MockUserDatasourcesMockRecorder {
	return m.recorder
}

// GetLoggedUser mocks base method.
func (m *MockUserDatasources) GetLoggedUser() (*datasource.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoggedUser")
	ret0, _ := ret[0].(*datasource.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoggedUser indicates an expected call of GetLoggedUser.
func (mr *MockUserDatasourcesMockRecorder) GetLoggedUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoggedUser", reflect.TypeOf((*MockUserDatasources)(nil).GetLoggedUser))
}

// GetUserByAccountNumber mocks base method.
func (m *MockUserDatasources) GetUserByAccountNumber(accountNumber string) (*datasource.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByAccountNumber", accountNumber)
	ret0, _ := ret[0].(*datasource.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByAccountNumber indicates an expected call of GetUserByAccountNumber.
func (mr *MockUserDatasourcesMockRecorder) GetUserByAccountNumber(accountNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByAccountNumber", reflect.TypeOf((*MockUserDatasources)(nil).GetUserByAccountNumber), accountNumber)
}

// InitiateDefaultUser mocks base method.
func (m *MockUserDatasources) InitiateDefaultUser() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InitiateDefaultUser")
}

// InitiateDefaultUser indicates an expected call of InitiateDefaultUser.
func (mr *MockUserDatasourcesMockRecorder) InitiateDefaultUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitiateDefaultUser", reflect.TypeOf((*MockUserDatasources)(nil).InitiateDefaultUser))
}

// InsertUser mocks base method.
func (m *MockUserDatasources) InsertUser(user datasource.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUser indicates an expected call of InsertUser.
func (mr *MockUserDatasourcesMockRecorder) InsertUser(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockUserDatasources)(nil).InsertUser), user)
}

// Login mocks base method.
func (m *MockUserDatasources) Login(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Login indicates an expected call of Login.
func (mr *MockUserDatasourcesMockRecorder) Login(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserDatasources)(nil).Login), id)
}

// Logout mocks base method.
func (m *MockUserDatasources) Logout() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout")
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockUserDatasourcesMockRecorder) Logout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockUserDatasources)(nil).Logout))
}

// UpdateUserBalance mocks base method.
func (m *MockUserDatasources) UpdateUserBalance(id int, balance int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserBalance", id, balance)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserBalance indicates an expected call of UpdateUserBalance.
func (mr *MockUserDatasourcesMockRecorder) UpdateUserBalance(id, balance any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserBalance", reflect.TypeOf((*MockUserDatasources)(nil).UpdateUserBalance), id, balance)
}
