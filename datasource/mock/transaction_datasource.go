// Code generated by MockGen. DO NOT EDIT.
// Source: datasource/transaction_datasource.go
//
// Generated by this command:
//
//	mockgen -source=datasource/transaction_datasource.go -destination=datasource/mock/transaction_datasource.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	datasource "atm-simulation/datasource"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTransactionDatasources is a mock of TransactionDatasources interface.
type MockTransactionDatasources struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionDatasourcesMockRecorder
}

// MockTransactionDatasourcesMockRecorder is the mock recorder for MockTransactionDatasources.
type MockTransactionDatasourcesMockRecorder struct {
	mock *MockTransactionDatasources
}

// NewMockTransactionDatasources creates a new mock instance.
func NewMockTransactionDatasources(ctrl *gomock.Controller) *MockTransactionDatasources {
	mock := &MockTransactionDatasources{ctrl: ctrl}
	mock.recorder = &MockTransactionDatasourcesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionDatasources) EXPECT() *MockTransactionDatasourcesMockRecorder {
	return m.recorder
}

// GetTransactionHistoriesByAccountNumber mocks base method.
func (m *MockTransactionDatasources) GetTransactionHistoriesByAccountNumber(accountNumber string) ([]datasource.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionHistoriesByAccountNumber", accountNumber)
	ret0, _ := ret[0].([]datasource.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionHistoriesByAccountNumber indicates an expected call of GetTransactionHistoriesByAccountNumber.
func (mr *MockTransactionDatasourcesMockRecorder) GetTransactionHistoriesByAccountNumber(accountNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionHistoriesByAccountNumber", reflect.TypeOf((*MockTransactionDatasources)(nil).GetTransactionHistoriesByAccountNumber), accountNumber)
}

// InsertTransactionHistory mocks base method.
func (m *MockTransactionDatasources) InsertTransactionHistory(transaction datasource.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTransactionHistory", transaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertTransactionHistory indicates an expected call of InsertTransactionHistory.
func (mr *MockTransactionDatasourcesMockRecorder) InsertTransactionHistory(transaction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTransactionHistory", reflect.TypeOf((*MockTransactionDatasources)(nil).InsertTransactionHistory), transaction)
}
